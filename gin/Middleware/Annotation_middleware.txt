Тут мы поговорим о том, как оснастить этот сервер middleware, и о том,
какие у нас имеются варианты интеграции этого ПО с существующим кодом

Gри создании нового экземпляра Gin с использованием gin.Default()
регистрируется и кое-какое middleware. В частности(в данном кейсе)
 — это ПО для логирования и для обработки ошибок panic.

Того же эффекта можно достичь, меньше полагаясь на стандартные механизмы, создав экземпляр маршрутизатора через gin.New
(при таком подходе middleware автоматически не подключается) и затем самостоятельно подключив то, что нам нужно:

func main() {
  // Ручная настройка middleware для логирования и обработки ошибок panic.
  router := gin.New()
  router.Use(gin.Logger())
  router.Use(gin.Recovery())

  server := NewTaskServer()

  router.POST("/task/", server.createTaskHandler)
  router.GET("/task/", server.getAllTasksHandler)
  router.DELETE("/task/", server.deleteAllTasksHandler)
  router.GET("/task/:id", server.getTaskHandler)
  router.DELETE("/task/:id", server.deleteTaskHandler)
  router.GET("/tag/:tag", server.tagHandler)
  router.GET("/due/:year/:month/:day", server.dueHandler)

  router.Run("localhost:" + os.Getenv("SERVERPORT"))
}

Метод Gin Use позволяет прикрепить к маршрутизатору цепочку middleware.
Настройка такого ПО для отдельных маршрутов в Gin никаких сложностей
не вызывает и производится с использованием групп маршрутизации. Для каждой группы можно
зарегистрировать собственное ПО. Middleware Gin использует тип, объявленный в пакете gin следующим образом

type HandlerFunc func(*Context)

Поэтому для использования в Gin middleware со стандартной сигнатурой понадобится адаптер.

Если вы пользуетесь Gin — знайте, что в репозиториях gin-contrib    https://github.com/gin-contrib/
представлена обширная коллекция модулей middleware, которые вы можете применить в своих проектах.
______________________________________________________________________________________________________________________
Паттерн «middleware» универсален, он широко используется в коде REST-серверов для решения множества самых разных задач.
В примерах, приведённых в этом материале, мы рассматриваем лишь простое ПО,
нацеленное на логирование данных и на обработку ошибок panic, так как моей целью было описание
механизма работы с таким ПО, а не подробное обсуждение разных вариантов его использования.

В реальности middleware применяется в следующих сферах:
стандартизированная проверка запросов, CORS, организация логирования данных,
сжатие данных, работа с сессиями, отслеживание запросов, кеширование, шифрование, аутентификация
