Улучшают внешний вид домашней страницы нашего веб-приложения статические файлы, такие как:
- CSS стили
- изображения
- фрагмент JavaScript кода, который поможет нам выделить активный элемент навигации.
______________________________________________________________________________________________________________________
Обработчик статических файлов  http.FileServer

В Go есть модуль net/http который поставляется вместе со встроенным обработчиком http.FileServer,
который можно использовать для доступа к статическим файлам из определенной директории по HTTP протоколу.
Новый маршрут, все HTTP-запросы, начинающиеся с "/static/", обрабаются с помощью http.FileServer

______________________________________________________________________________________________________________________
Особенности обработчика статических файлов

Он очищает все пути HTTP-запросов, запуская их через функцию path.Clean()
перед тем как приступить к поиску запрашиваемого файла. Так удаляются потенциально опасные символы,
такие как . и .. из URL, это поможет предотвратить атаки по обходу нижних уровней директорий.
Эта функция особенно полезна, если вы используете статические файлы вместе с маршрутизатором,
который не очищает URL пути в автоматическом порядке;

Сегментирование HTTP запросов полностью поддерживаются. Это необходимо,
если ваше веб-приложение предоставляет пользователям возможность скачивания больших файлов
или вы предоставляете видео поток и требуется поддерживать возобновляемые загрузки.
Увидеть эту возможность в действии можно при помощи curl для сохранения картинки logo.png
в несколько запросов по 100-199 байт каждый;

Такие заголовки как Last-Modified и If-Modified-Since тоже поддерживаются.
Если файл не изменился с момента последнего запроса пользователя,
http.FileServer отправит код состояния 304 Not Modified вместо самого файла,
так как сам файл уже есть у клиента в кэше браузера.
Это помогает уменьшить задержку и расходы на обработку запроса для клиента и для сервера;

Заголовок Content-Type автоматически устанавливается в зависимости от расширения файла
с помощью функции mime.TypeByExtension(). В зависимости от задачи,
можно добавить свои собственные расширения и типы контента с помощью функции mime.AddExtensionType().
_______________________________________________________________________________________________________________
Производительность

Обратите внимание, что после запуска веб-приложения, обработчик  http.FileServer,
возможно, не будет читать файлы напрямую с жесткого диска.
Операционные системы на базе Windows и Unix кэшируют недавно использованные файлы в RAM,
поэтому (по крайней мере, для часто использованных файлов) http.FileServer будет доставать их из RAM,
а не выполнять медленную обработку файлов с жесткого диска.

